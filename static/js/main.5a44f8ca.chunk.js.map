{"version":3,"sources":["Form.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","e","handleSubmit","style","margin","width","textAlign","className","htmlFor","id","value","imgNum","onChange","handleImgNumChange","animal","handleAnimalChange","disabled","isLoading","type","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","event","setState","target","_this2","randomAnimal","axios","get","then","response","console","log","catch","error","preventDefault","Math","floor","random","_this3","src_Form","marginTop","map","pic","index","height","key","src","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5a44f8ca.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = (props) => (\r\n <div>\r\n        <form onSubmit={(e)=>props.handleSubmit(e)} style={{ margin: \"0 auto\", width: \"150px\", textAlign: \"center\" }}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"image\">Image number:</label>\r\n            <select id=\"image\" className=\"form-control\" value={props.imgNum} onChange={(e)=>props.handleImgNumChange(e)}>\r\n              <option value=\"1\">1</option>\r\n              <option value=\"2\">2</option>\r\n              <option value=\"3\">3</option>\r\n              <option value=\"4\">4</option>\r\n              <option value=\"5\">5</option>\r\n              <option value=\"6\">6</option>\r\n              <option value=\"7\">7</option>\r\n              <option value=\"8\">8</option>\r\n              <option value=\"9\">9</option>\r\n              <option value=\"10\">10</option>\r\n            </select>\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"animal\">Animal type:</label>\r\n            <select id=\"animal\" className=\"form-control\" value={props.animal} onChange={(e)=>props.handleAnimalChange(e)}>\r\n              <option value=\"random\">Random</option>\r\n              <option value=\"shibes\">Shibes</option>\r\n              <option value=\"cats\">Cats</option>\r\n              <option value=\"birds\">Birds</option>\r\n            </select>\r\n\r\n          </div>\r\n\r\n          <input className=\"btn btn-primary\" disabled={props.isLoading} type=\"submit\" value={props.isLoading? \"Loading data\": \"Search\"} />\r\n\r\n        </form>\r\n\r\n </div>\r\n);\r\n\r\nexport default Form;","import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Form from './Form';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      imgNum: 1,\n      animal: 'random',\n      isLoading: false,\n      data: []\n    };\n  }\n\n  handleImgNumChange(event) {\n    this.setState({ imgNum: event.target.value });\n  }\n  handleAnimalChange(event) {\n    this.setState({ animal: event.target.value });\n  }\n\n  handleSubmit(event) {\n    this.setState({ data: [], isLoading: true });\n    let animal = this.state.animal\n    if (this.state.animal === \"random\") animal = (this.randomAnimal())\n    axios.get('https://cors-anywhere.herokuapp.com/https://shibe.online/api/' + animal + '?count=' + this.state.imgNum)\n      .then(response => {\n        console.log(response.data)\n        this.setState({ data: response.data, isLoading: false });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n    event.preventDefault();\n  }\n\n  randomAnimal() {\n    let animals = [\"shibes\", \"cats\", \"birds\"]\n    return animals[Math.floor(Math.random() * 3)]\n  }\n\n  render() {\n    return (\n      <div >\n        <Form \n        isLoading={this.state.isLoading} \n        imgNum = {this.state.imgNum} \n        animal = {this.state.animal}\n        handleImgNumChange = {(e)=>this.handleImgNumChange(e)}\n        handleAnimalChange = {(e)=>this.handleAnimalChange(e)}\n        handleSubmit = {(e)=>this.handleSubmit(e)} \n        />\n\n        <div \n          style={{ marginTop: \"40px\", textAlign: \"center\" }}>\n          {this.state.data.map((pic, index) =>\n            <img style={{ height: \"200px\", width: \"200px\" }}\n              key={index}\n              src={pic} \n            />)}\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}